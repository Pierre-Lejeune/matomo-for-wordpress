<?php

$ImportTest = new ImportTest();
tests_add_filter( 'muplugins_loaded', [ $ImportTest, 'manually_load_plugin' ] );

use WpMatomo\Db\Settings;
use WpMatomo\Site;
use WpMatomo\WpStatistics\Importer;
use WpMatomo\WpStatistics\Logger\EchoLogger;
use WpMatomo\Report\Data;
use Piwik\Plugins\UserCountry\Archiver;

class ImportTest extends MatomoAnalytics_TestCase {
	/**
	 * @var bool
	 */
	protected $imported = false;
	/**
	 * @var null|bool
	 */
	private $enabled = null;
	/**
	 * @var Data
	 */
	private $data;

	public function __construct() {
		parent::__construct();
		if ( $this->can_be_tested() ) {
			WP_Filesystem();
			global $wp_filesystem;
			$this->data = new Data();

			// import the dump file
			global $wpdb;
			$file         = dirname( __FILE__ ) . '/dump.sql';
			$db_settings  = new Settings();
			$prefix_table = $db_settings->prefix_table_name();
			foreach ( explode( ';', str_replace( 'wp_', $prefix_table, $wp_filesystem->get_contents( $file ) ) ) as $query ) {
				if ( ! empty( trim( $query ) ) ) {
					$wpdb->query( $query );
				}
			}
		}
	}

	private function can_be_tested() {
		if ( is_null( $this->enabled ) ) {
			$this->enabled = ( ! getenv( 'TRAVIS' ) && file_exists( $this->plugin_file() ) );
		}

		return $this->enabled;

	}

	private function plugin_file() {
		return dirname( dirname( dirname( dirname( dirname( dirname( __FILE__ ) ) ) ) ) ) . '/wp-statistics/wp-statistics.php';
	}

	public function manually_load_plugin() {
		$file = $this->plugin_file();
		if ( file_exists( $file ) ) {
			require_once $file;
			$GLOBALS['WP_Statistics']->includes();
		}
	}

	public function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		\WpMatomo\Bootstrap::do_bootstrap();
		$this->manually_load_plugin();
		//if ( $this->imported === false ) {
			// run the import
			$importer = new Importer( new EchoLogger() );
			$site     = new Site();
			$id_site  = $site->get_current_matomo_site_id();
			$importer->import( $id_site );
			$this->imported = true;
		//}
	}

	public function test_countries_found() {
		if ( ! $this->can_be_tested() ) {
			$this->markTestSkipped( 'Travis' );

			return;
		}

		$report = $this->fetch_report( Archiver::COUNTRY_RECORD_NAME );
		$this->assertTrue( $report['reportData']->getRowsCount(), 92 );
	}

	protected function fetch_report( $report_name ) {
		$meta = array(
			'module'     => $report_name,
			'action'     => 'get',
			'parameters' => array(),
		);

		return $this->data->fetch_report( $meta, 'day', '2020-10-17', 'nb_visits', '10' );
	}

	public function test_regions_found() {
		if ( ! $this->can_be_tested() ) {
			$this->markTestSkipped( 'Travis' );

			return;
		}

		$report = $this->fetch_report( Archiver::REGION_RECORD_NAME );
		$this->assertTrue( $report['reportData']->getRowsCount(), 392 );
	}

	public function test_cities_found() {
		if ( ! $this->can_be_tested() ) {
			$this->markTestSkipped( 'Travis' );

			return;
		}

		$report = $this->fetch_report( Archiver::CITY_RECORD_NAME );
		$this->assertTrue( $report['reportData']->getRowsCount(), 628 );
	}
}